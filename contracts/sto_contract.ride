let managementAddressPubkey = base58'D_MANAGEMENT_PUBKEY'
let coldVault = addressFromString("D_COLD_VAULT_ADDR")
let token = base58'D_ASSET_ID'
let tokenRate = D_RATE
let softCapWaves = D_SOFT_CAP_WAVES
let hardCapWaves = D_HARD_CAP_WAVES
let startDate = D_START_DATE
let endDate = D_FINISH_DATE
let whitelist = D_WHITELIST
 
let this = extract(tx.sender)
 
match tx {
  case sendTokens:TransferTransaction =>
    let requestedAmount = sendTokens.amount
    let amountBelowHardCap = requestedAmount <= (hardCapWaves / tokenRate)
    let leftToHardcap = hardCapWaves - wavesBalance(this)
    let amountBelowRemainder = requestedAmount <= (hardCapWaves / tokenRate)
    let correctAsset = sendTokens.assetId == token
    let afterStart = sendTokens.timestamp >= startDate
    let beforeEnd = sendTokens.timestamp <= endDate
  
    let buyTokensTx = transactionById(sendTokens.proofs[1])
    let buyTokensTxHeight = extract(transactionHeightById(sendTokens.proofs[1]))
    
    match buyTokensTx {
      case buyTokens : TransferTransaction =>
        let sendedAmount = buyTokens.amount
        let correctAmount = requestedAmount <= (sendedAmount / tokenRate)

        correctAsset && correctAmount
        && amountBelowHardCap && amountBelowRemainder
        && afterStart && beforeEnd
      case _ => throw("attached transaction is invalid")
    }
case dataTx:DataTransaction =>
    if (size(dataTx.data) == 1) then
    {
        let dataKey = extract(dataTx.data[0].key)
        let dataValue = extract(dataTx.data[0].value)
        #accept whitelist data on contract
        if (dataKey == "WhitelistAddresses") then true
        #validate finalization
        else if (dataKey == "Finalized" && dataValue == "true") then
            {
                let afterEnd = dataTx.timestamp >= endDate
                let goalReached = wavesBalance(this) >= softCapWaves

                afterEnd && goalReached
            }
        else
            throw("STO not finished yet")
    }
    else
        throw("Invalid data transaction")

case changeScript:SetScriptTransaction => true
case _ => throw("This type of transaction is not supported by account-script")
}
